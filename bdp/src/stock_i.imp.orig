/*
Sajti Tamas
CWXY37
*/

IMPLEMENTATION stock_i
REFINES stock




IMPORTS
    forklift ,
    shortage_classifier

VALUES
    MaxStocks = {
        1 |-> 1000 ,
        2 |-> 2000 ,
        3 |-> 500 ,
        4 |-> 125 ,
        5 |-> 4000
    }

CONCRETE_VARIABLES
    cCurrentStocks , cShortages , cRequiredAmounts

INVARIANT
    // types
    cCurrentStocks : ( 1 .. 5 ) --> ( 0 .. 4000 )
    & cRequiredAmounts : ( 1 .. 5 ) --> ( 0 .. 4000 )
    & cShortages : ( 1 .. 5 ) --> BOOL

    // ties to abstract variables
    & cCurrentStocks = CurrentStocks
    & cRequiredAmounts = RequiredAmounts

    & dom ( cShortages |> { TRUE } ) = Shortages
    & dom ( cShortages |> { FALSE } ) = ( ( 1 .. 5 ) ) - Shortages

    /*        
    & !xx.(xx : Shortages => cShortages(xx) = TRUE)
    & !xx.(xx : ((STOCKS) - Shortages) => cShortages(xx) = FALSE)
    & !xx.(xx : dom(cShortages) & cShortages(xx) = TRUE =>
        xx : Shortages)
    & !xx.(xx : dom(cShortages) & cShortages(xx) = FALSE =>
        xx : (STOCKS) - Shortages)
        
        */
    //& dom(cShortages |> {TRUE}) = Shortages
    //& dom(cShortages |> {FALSE}) = Shortages

    // cCurrentStocks
    & dom ( cCurrentStocks ) = dom ( MaxStocks )
    & ! ii . ( ii : dom ( cCurrentStocks ) => cCurrentStocks ( ii ) <= MaxStocks ( ii ) )

    // cShortages

    // cRequiredAmounts
    & ! ii . ( ii : dom ( cRequiredAmounts ) => cRequiredAmounts ( ii ) = MaxStocks ( ii ) - cCurrentStocks ( ii ) )

INITIALISATION
    cCurrentStocks := ( 1 .. 5 ) * { 0 } ;
    cShortages := ( 1 .. 5 ) * { TRUE } ;
    cRequiredAmounts := MaxStocks

OPERATIONS

    Put ( ii , amt ) = //Feladat1
    BEGIN
<<<<<<< Updated upstream
        VAR currentTmp , requiredTmp IN

            currentTmp , requiredTmp <--
                BringIntoWarehouse ( cCurrentStocks ( ii ) , amt , MaxStocks ( ii ) ) ;

            IF cCurrentStocks ( ii ) < MaxStocks ( ii ) / 2 THEN
                cShortages ( ii ) := TRUE
            ELSE
                cShortages ( ii ) := FALSE
            END ;

            cCurrentStocks ( ii ) := currentTmp ;
            cRequiredAmounts ( ii ) := requiredTmp
=======
        VAR currentTmp , requiredTmp , shortageTmp IN

            currentTmp , requiredTmp <--
                BringIntoWarehouse ( cCurrentStocks ( ii ) , amt , MaxStocks ( ii ) ) ;

            shortageTmp <-- IsOnShortage (
                cShortages ,
                cCurrentStocks ,
                ii ,
                amt ,
                MaxStocks
            ) ;

            cCurrentStocks ( ii ) := currentTmp ;
            cRequiredAmounts ( ii ) := requiredTmp ;
            cShortages ( ii ) := shortageTmp
>>>>>>> Stashed changes
        END
    END
    ;

/*
    Pop (ii, amt ) = //Feladat2
    BEGIN
        cCurrentStocks(ii) := cCurrentStocks(ii) - amt;
        cRequiredAmounts(ii) := MaxStocks(ii) - (cCurrentStocks(ii) - amt);
        cShortages := {xx | xx : dom(cCurrentStocks) & (cCurrentStocks<+{ii|->cCurrentStocks(ii)-amt})(xx) < MaxStocks(xx) / 2}
    END
    ;

    */


    res <-- GetShortage = //Feladat3
        res := cShortages
    ;


    sum <-- GetSum = //Feladat4
    BEGIN
        VAR ii IN
            ii := 0 ;
            sum := 0 ;

            WHILE ii < 5 DO
                ii := ii + 1 ;
                sum := sum + cCurrentStocks ( ii )
            INVARIANT
                ii : 0 .. 5
                & sum : 0 .. ( ii * 4000 )
                & sum = SIGMA ( xx ) . ( xx : 1 .. ii | cCurrentStocks ( xx ) )
            VARIANT
                6 - ii
            END
        END
    END
    ;

    res <-- GetRequiredAmount ( ii ) = // Feladat5
    BEGIN
       res := cRequiredAmounts ( ii )
    END


 END
