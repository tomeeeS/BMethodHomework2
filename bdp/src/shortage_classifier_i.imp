IMPLEMENTATION shortage_classifier_i

REFINES shortage_classifier





OPERATIONS


    res <-- IsOnShortage (
        Shortages ,
        CurrentStocks ,
        ii ,
        NewCurrentStock ,
        MaxStocks
    ) =
    BEGIN
        ASSERT
            dom ( Shortages |> { TRUE } )
            = {
                xx | xx : dom ( CurrentStocks ) & CurrentStocks ( xx ) < MaxStocks ( xx ) / 2
            }
        THEN skip END ;


        IF NewCurrentStock < MaxStocks ( ii ) / 2 THEN
            res := Shortages ;
            res ( ii ) := TRUE
        ELSE
            res := Shortages ;
            res ( ii ) := FALSE
        END ;


        ASSERT // helps in proofs

            dom ( CurrentStocks ) = dom ( CurrentStocks <+ { ii |-> NewCurrentStock } )

            // things outside ii aren't changed
            & dom ( ( { ii } <<| Shortages ) |> { TRUE } )
            = {
                xx | xx : dom ( { ii } <<| CurrentStocks ) & CurrentStocks ( xx ) < MaxStocks ( xx ) / 2
            }
            // A: 
            & ! xx . ( xx : dom ( { ii } <<| CurrentStocks )
                    & ( CurrentStocks <+ { ii |-> NewCurrentStock } ) ( xx )
                        < MaxStocks ( xx ) / 2
                =>
                    xx : { xx | xx : dom ( { ii } <<| CurrentStocks )
                    & CurrentStocks ( xx ) < MaxStocks ( xx ) / 2 }
            )

            & dom ( CurrentStocks <+ { ii |-> NewCurrentStock } )
                = dom ( { ii } <<| CurrentStocks ) \/ dom ( { ii |-> NewCurrentStock } )


            & ! xx . ( xx : dom ( { ii } <<| Shortages ) =>
                res ( xx ) = Shortages ( xx ) )

            & dom ( ( { ii } <<| Shortages ) |> { TRUE } )
                = { xx | xx : dom ( { ii } <<| CurrentStocks )
                    & CurrentStocks ( xx ) < MaxStocks ( xx ) / 2 }

            // what happens in ii
            & ( NewCurrentStock < MaxStocks ( ii ) / 2 =>
                res ( ii ) = TRUE )
            & ( not ( NewCurrentStock < MaxStocks ( ii ) / 2 ) =>
                res ( ii ) = FALSE )

            // the new Shortages is the unchanged parts (outside of {ii})
            //   and the changed part (at {ii})
            //& Shortages <+ {ii |-> TRUE} = ({ii} <<| Shortages) \/ {ii |-> TRUE}
            & dom ( ( Shortages <+ { ii |-> TRUE } ) |> { TRUE } ) =
                dom ( ( { ii } <<| Shortages ) |> { TRUE } )
                \/ dom ( { ii |-> res ( ii ) } |> { TRUE } )

            & Shortages <+ { ii |-> FALSE } = ( { ii } <<| Shortages ) \/ { ii |-> FALSE }

            & dom ( { ii } <<| Shortages |> { TRUE } ) <: dom ( Shortages |> { TRUE } )

            & dom ( Shortages <+ { ii |-> TRUE } |> { FALSE } )
                = dom ( Shortages )
                    - dom ( Shortages <+ { ii |-> TRUE } |> { TRUE } )

        THEN skip END ; ASSERT
            {
                xx | xx : dom ( { ii } <<| CurrentStocks )
                    & ( CurrentStocks <+ { ii |-> NewCurrentStock } ) ( xx )
                        < MaxStocks ( xx ) / 2
            } =
            {
                xx | xx : dom ( { ii } <<| CurrentStocks )
                    & CurrentStocks ( xx )
                        < MaxStocks ( xx ) / 2
            }

            & dom ( ( Shortages <+ { ii |-> FALSE } ) |> { TRUE } ) =
                dom ( ( { ii } <<| Shortages ) |> { TRUE } )

        THEN skip END ; ASSERT

            ! xx . ( ( xx : ( dom ( { ii } <<| CurrentStocks ) \/ dom ( { ii |-> NewCurrentStock } ) )
                    & ( CurrentStocks <+ { ii |-> NewCurrentStock } ) ( xx ) < MaxStocks ( xx ) / 2
                )
                =>
                ( xx : dom ( CurrentStocks <+ { ii |-> NewCurrentStock } )
                    & ( CurrentStocks <+ { ii |-> NewCurrentStock } ) ( xx ) < MaxStocks ( xx ) / 2 )
            )
            & ! xx . ( ( xx : dom ( CurrentStocks <+ { ii |-> NewCurrentStock } )
                    & ( CurrentStocks <+ { ii |-> NewCurrentStock } ) ( xx ) < MaxStocks ( xx ) / 2
                )
                =>
                ( xx : ( dom ( { ii } <<| CurrentStocks ) \/ dom ( { ii |-> NewCurrentStock } ) )
                    & ( CurrentStocks <+ { ii |-> NewCurrentStock } ) ( xx ) < MaxStocks ( xx ) / 2 )
            )
        THEN skip END ; ASSERT
            ( { xx | xx : dom ( CurrentStocks <+ { ii |-> NewCurrentStock } )
                    & ( CurrentStocks <+ { ii |-> NewCurrentStock } ) ( xx ) < MaxStocks ( xx ) / 2 }
                <: { xx | xx : dom ( { ii } <<| CurrentStocks )
                    & ( CurrentStocks <+ { ii |-> NewCurrentStock } ) ( xx ) < MaxStocks ( xx ) / 2 }
                \/ { xx | xx : dom ( { ii |-> NewCurrentStock } )
                    & ( CurrentStocks <+ { ii |-> NewCurrentStock } ) ( xx ) < MaxStocks ( xx ) / 2 }
            )
            & ( { xx | xx : dom ( { ii } <<| CurrentStocks )
                    & ( CurrentStocks <+ { ii |-> NewCurrentStock } ) ( xx ) < MaxStocks ( xx ) / 2 }
                \/ { xx | xx : dom ( { ii |-> NewCurrentStock } )
                    & ( CurrentStocks <+ { ii |-> NewCurrentStock } ) ( xx ) < MaxStocks ( xx ) / 2 }
                <: { xx | xx : dom ( CurrentStocks <+ { ii |-> NewCurrentStock } )
                    & ( CurrentStocks <+ { ii |-> NewCurrentStock } ) ( xx ) < MaxStocks ( xx ) / 2 }
            )

        THEN skip END ; ASSERT
            ( { xx | xx : dom ( CurrentStocks <+ { ii |-> NewCurrentStock } )
                    & ( CurrentStocks <+ { ii |-> NewCurrentStock } ) ( xx ) < MaxStocks ( xx ) / 2 }
                = { xx | xx : dom ( { ii } <<| CurrentStocks )
                    & ( CurrentStocks <+ { ii |-> NewCurrentStock } ) ( xx ) < MaxStocks ( xx ) / 2 }
                \/ { xx | xx : dom ( { ii |-> NewCurrentStock } )
                    & ( CurrentStocks <+ { ii |-> NewCurrentStock } ) ( xx ) < MaxStocks ( xx ) / 2 }
            )

        THEN skip END ; ASSERT

        { xx | xx : dom ( { ii |-> NewCurrentStock } )
                & ( CurrentStocks <+ { ii |-> NewCurrentStock } ) ( xx ) < MaxStocks ( xx ) / 2 }
            = dom ( { ii |-> res ( ii ) } |> { TRUE } )

        THEN skip END
    END


END
