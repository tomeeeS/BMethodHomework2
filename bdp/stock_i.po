THEORY ProofList IS
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(87) & WellDefinedness_GetRequiredAmount.2,(_f(111) => _f(119));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(87) & WellDefinedness_GetRequiredAmount.1,(_f(111) => _f(89));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & WellDefinedness_GetSum.5,(_f(70) & _f(72) & _f(74) & _f(111) => _f(112));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & WellDefinedness_GetSum.4,(_f(70) & _f(72) & _f(74) & _f(111) => _f(118));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & WellDefinedness_GetSum.3,(_f(70) & _f(72) & _f(115) & _f(111) => _f(112));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & WellDefinedness_GetSum.2,(_f(70) & _f(72) & _f(115) & _f(111) => _f(117));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & WellDefinedness_GetSum.1,(_f(70) & _f(72) & _f(111) => _f(116));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(25) & WellDefinedness_Put.10,(_f(111) => _f(114));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(25) & WellDefinedness_Put.9,(_f(111) => _f(113));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(25) & WellDefinedness_Put.8,(_f(111) => _f(8));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(25) & WellDefinedness_Put.7,(_f(111) => _f(112));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(25) & WellDefinedness_Put.6,(_f(111) => _f(58));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(25) & WellDefinedness_Put.5,(_f(35) => _f(40));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(25) & WellDefinedness_Put.4,(_f(35) => _f(39));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(25) & WellDefinedness_Put.3,(_f(35) => _f(38));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(25) & WellDefinedness_Put.2,(_f(35) => _f(37));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(25) & WellDefinedness_Put.1,(_f(35) => _f(36));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(60) & GetRequiredAmount.2,(_f(87) & _f(57) => _f(89));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(60) & GetRequiredAmount.1,(_f(87) & _f(9) => _f(88));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(62) & GetSum.10,(_f(63) & _f(64) & _f(65) & _f(67) & _f(84) => _f(85));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(62) & GetSum.9,(_f(63) & _f(64) & _f(65) & _f(66) & _f(57) => _f(83));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(62) & GetSum.8,(_f(63) & _f(64) & _f(65) & _f(66) & _f(81) => _f(82));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(62) & GetSum.7,(_f(63) & _f(64) & _f(65) & _f(66) & _f(77) & _f(73) => _f(80));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(62) & GetSum.6,(_f(63) & _f(64) & _f(65) & _f(66) & _f(77) & _f(71) => _f(79));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(62) & GetSum.5,(_f(63) & _f(64) & _f(65) & _f(66) & _f(77) & _f(69) => _f(78));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(62) & GetSum.4,(_f(63) & _f(64) & _f(65) & _f(75) => _f(76));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(62) & GetSum.3,(_f(68) & _f(73) => _f(74));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(62) & GetSum.2,(_f(68) & _f(71) => _f(72));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(62) & GetSum.1,(_f(68) & _f(69) => _f(70));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.27,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(57) => _f(8));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.26,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(57) => _f(58));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.25,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(29) & _f(27) & _f(9) => _f(53));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.24,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(29) & _f(26) & _f(9) => _f(52));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.23,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(29) & _f(9) & _f(19) => _f(51));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.22,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(29) & _f(9) & _f(17) => _f(56));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.21,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(29) & _f(9) & _f(15) => _f(55));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.20,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(29) & _f(9) & _f(47) => _f(48));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.19,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(29) & _f(9) & _f(45) => _f(46));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.18,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(29) & _f(9) & _f(13) => _f(54));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.17,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(29) & _f(9) & _f(42) => _f(43));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.16,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(29) & _f(9) & _f(11) => _f(41));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.15,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(28) & _f(27) & _f(9) => _f(53));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.14,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(28) & _f(26) & _f(9) => _f(52));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.13,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(28) & _f(9) & _f(19) => _f(51));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.12,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(28) & _f(9) & _f(17) => _f(50));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.11,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(28) & _f(9) & _f(15) => _f(49));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.10,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(28) & _f(9) & _f(47) => _f(48));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.9,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(28) & _f(9) & _f(45) => _f(46));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.8,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(28) & _f(9) & _f(13) => _f(44));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.7,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(28) & _f(9) & _f(42) => _f(43));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.6,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(28) & _f(9) & _f(11) => _f(41));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.5,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(35) => _f(40));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.4,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(35) => _f(39));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.3,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(35) => _f(38));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.2,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(35) => _f(37));
_f(1) & _f(2) & _f(3) & _f(23) & _f(24) & _f(4) & Put.1,(_f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(35) => _f(36));
_f(1) & _f(2) & _f(3) & Initialisation.8,(_f(8) & _f(9) => _f(22));
_f(1) & _f(2) & _f(3) & Initialisation.7,(_f(7) & _f(9) => _f(21));
_f(1) & _f(2) & _f(3) & Initialisation.6,(_f(9) & _f(19) => _f(20));
_f(1) & _f(2) & _f(3) & Initialisation.5,(_f(9) & _f(17) => _f(18));
_f(1) & _f(2) & _f(3) & Initialisation.4,(_f(9) & _f(15) => _f(16));
_f(1) & _f(2) & _f(3) & Initialisation.3,(_f(9) & _f(13) => _f(14));
_f(1) & _f(2) & _f(3) & Initialisation.2,(_f(9) & _f(11) => _f(12));
_f(1) & _f(2) & _f(3) & Initialisation.1,(_f(9) => _f(10));
_f(1) & _f(4) & ValuesLemmas.1,(_f(5) => _f(6))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483648) .. (2147483647))));
MaxStocks : ((1) .. (5)) +-> ((0) .. (4000)) & dom(MaxStocks) = ((1) .. (5)) & ((MaxStocks) : (((((1) .. (5))) --> (((0) .. (4000)))))) & ((MaxStocks) = (({((1) |-> (1000))}\/{((2) |-> (2000))}\/{((3) |-> (500))}\/{((4) |-> (125))}\/{((5) |-> (4000))})));
((MaxStocks) = (({((1) |-> (1000))}\/{((2) |-> (2000))}\/{((3) |-> (500))}\/{((4) |-> (125))}\/{((5) |-> (4000))})));
btrue;
"Valuation is correct";
((({((1) |-> (1000))}\/{((2) |-> (2000))}\/{((3) |-> (500))}\/{((4) |-> (125))}\/{((5) |-> (4000))})) : (((((1) .. (5))) --> (((0) .. (4000))))));
((ii) : (dom((((1) .. (5)) * ({0})))));
((ii) : (dom(MaxStocks)));
"Refinement is correct";
(((((1) .. (5)) * ({0}))) : (((((1) .. (5))) --> (({0})))));
"Check invariant ((cCurrentStocks$1) : (((((1) .. (5))) --> (((0) .. (4000))))))";
(((((1) .. (5)) * ({0}))) : (((((1) .. (5))) --> (((0) .. (4000))))));
"Check invariant ((cShortages$1) : (((((1) .. (5))) --> (BOOL))))";
(((((1) .. (5)) * ({TRUE}))) : (((((1) .. (5))) --> (BOOL))));
"Check invariant ((dom(((cShortages$1) |> (({TRUE}))))) = (Shortages))";
((dom((((((1) .. (5)) * ({TRUE}))) |> (({TRUE}))))) = (((1) .. (5))));
"Check invariant ((dom(((cShortages$1) |> (({FALSE}))))) = ((((1) .. (5)) - Shortages)))";
((dom((((((1) .. (5)) * ({TRUE}))) |> (({FALSE}))))) = ((((1) .. (5)) - ((1) .. (5)))));
"Check invariant ((dom(cCurrentStocks$1)) = (dom(MaxStocks)))";
((dom((((1) .. (5)) * ({0})))) = (dom(MaxStocks)));
(((((1) .. (5)) * ({0})) )(ii) <= (MaxStocks )(ii));
(((MaxStocks )(ii)) = (((MaxStocks )(ii) - ((((1) .. (5)) * ({0})) )(ii))));
CurrentStocks : ((1) .. (5)) +-> ((0) .. (4000)) & dom(CurrentStocks) = ((1) .. (5)) & ((CurrentStocks) : (((((1) .. (5))) --> (((0) .. (4000)))))) & ((Shortages) : (FIN(((1) .. (5))))) & RequiredAmounts : ((1) .. (5)) +-> ((0) .. (4000)) & dom(RequiredAmounts) = ((1) .. (5)) & ((RequiredAmounts) : (((((1) .. (5))) --> (((0) .. (4000)))))) & ((dom(CurrentStocks)) = (dom(MaxStocks))) & !(ii).(((((ii) : (dom(CurrentStocks)))) => ((((CurrentStocks )(ii)) : (((0) .. ((MaxStocks )(ii)))))))) & !(xx).(((((xx) : (Shortages))) => (((CurrentStocks )(xx) +1 <= ((MaxStocks )(xx) / 2))))) & !(xx).(((((xx) : (dom(CurrentStocks))) & ((CurrentStocks )(xx) +1 <= ((MaxStocks )(xx) / 2))) => (((xx) : (Shortages))))) & !(ii).(((((ii) : (dom(RequiredAmounts)))) => ((((RequiredAmounts )(ii)) = (((MaxStocks )(ii) - (CurrentStocks )(ii)))))));
cCurrentStocks$1 : ((1) .. (5)) +-> ((0) .. (4000)) & dom(cCurrentStocks$1) = ((1) .. (5)) & ((cCurrentStocks$1) : (((((1) .. (5))) --> (((0) .. (4000)))))) & cRequiredAmounts$1 : ((1) .. (5)) +-> ((0) .. (4000)) & dom(cRequiredAmounts$1) = ((1) .. (5)) & ((cRequiredAmounts$1) : (((((1) .. (5))) --> (((0) .. (4000)))))) & cShortages$1 : ((1) .. (5)) +-> BOOL & dom(cShortages$1) = ((1) .. (5)) & ((cShortages$1) : (((((1) .. (5))) --> (BOOL)))) & ((cCurrentStocks$1) = (CurrentStocks)) & ((cRequiredAmounts$1) = (RequiredAmounts)) & ((dom(((cShortages$1) |> (({TRUE}))))) = (Shortages)) & ((dom(((cShortages$1) |> (({FALSE}))))) = ((((1) .. (5)) - Shortages))) & ((dom(cCurrentStocks$1)) = (dom(MaxStocks))) & !(ii).(((((ii) : (dom(cCurrentStocks$1)))) => (((cCurrentStocks$1 )(ii) <= (MaxStocks )(ii))))) & !(ii).(((((ii) : (dom(cRequiredAmounts$1)))) => ((((cRequiredAmounts$1 )(ii)) = (((MaxStocks )(ii) - (cCurrentStocks$1 )(ii)))))));
((ii) : (dom(CurrentStocks))) & ((amt) : (((1) .. (4000)))) & ((((CurrentStocks )(ii) + amt)) : (((0) .. (4000)))) & (((CurrentStocks )(ii) + amt) <= (MaxStocks )(ii)) & ((((MaxStocks )(ii) - ((CurrentStocks )(ii) + amt))) : (((0) .. (4000))));
((ii$1) : (dom(((cCurrentStocks$1) <+ (({((ii) |-> (((cCurrentStocks$1 )(ii) + amt)))}))))));
((ii$1) : (dom(((cRequiredAmounts$1) <+ (({((ii) |-> (((MaxStocks )(ii) - ((cCurrentStocks$1 )(ii) + amt))))}))))));
((cCurrentStocks$1 )(ii) +1 <= ((MaxStocks )(ii) / 2));
not(((cCurrentStocks$1 )(ii) +1 <= ((MaxStocks )(ii) / 2)));
((ii) : (dom(CurrentStocks)));
((amt) : (((1) .. (4000))));
((((CurrentStocks )(ii) + amt)) : (((0) .. (4000))));
(((CurrentStocks )(ii) + amt) <= (MaxStocks )(ii));
((((MaxStocks )(ii) - ((CurrentStocks )(ii) + amt))) : (((0) .. (4000))));
"Precondition predicate";
(((cCurrentStocks$1 )(ii)) : (((0) .. (4000))));
(((MaxStocks )(ii)) : (((0) .. (4000))));
((((cCurrentStocks$1 )(ii) + amt)) : (((0) .. (4000))));
(((cCurrentStocks$1 )(ii) + amt) <= (MaxStocks )(ii));
((((MaxStocks )(ii) - ((cCurrentStocks$1 )(ii) + amt))) : (((0) .. (4000))));
((((cCurrentStocks$1) <+ (({((ii) |-> (((cCurrentStocks$1 )(ii) + amt)))})))) : (((((1) .. (5))) --> (((0) .. (4000))))));
"Check invariant ((cRequiredAmounts$1) : (((((1) .. (5))) --> (((0) .. (4000))))))";
((((cRequiredAmounts$1) <+ (({((ii) |-> (((MaxStocks )(ii) - ((cCurrentStocks$1 )(ii) + amt))))})))) : (((((1) .. (5))) --> (((0) .. (4000))))));
((((cShortages$1) <+ (({((ii) |-> (TRUE))})))) : (((((1) .. (5))) --> (BOOL))));
"Check invariant ((cCurrentStocks$1) = (CurrentStocks))";
((((cCurrentStocks$1) <+ (({((ii) |-> (((cCurrentStocks$1 )(ii) + amt)))})))) = (((CurrentStocks) <+ (({((ii) |-> (((CurrentStocks )(ii) + amt)))})))));
"Check invariant ((cRequiredAmounts$1) = (RequiredAmounts))";
((((cRequiredAmounts$1) <+ (({((ii) |-> (((MaxStocks )(ii) - ((cCurrentStocks$1 )(ii) + amt))))})))) = (((RequiredAmounts) <+ (({((ii) |-> (((MaxStocks )(ii) - ((CurrentStocks )(ii) + amt))))})))));
((dom(((((cShortages$1) <+ (({((ii) |-> (TRUE))})))) |> (({TRUE}))))) = (SET(xx).(((xx) : (dom(CurrentStocks))) & ((((CurrentStocks) <+ (({((ii) |-> (((CurrentStocks )(ii) + amt)))}))) )(xx) +1 <= ((MaxStocks )(xx) / 2)))));
((dom(((((cShortages$1) <+ (({((ii) |-> (TRUE))})))) |> (({FALSE}))))) = ((((1) .. (5)) - SET(xx).(((xx) : (dom(CurrentStocks))) & ((((CurrentStocks) <+ (({((ii) |-> (((CurrentStocks )(ii) + amt)))}))) )(xx) +1 <= ((MaxStocks )(xx) / 2))))));
((dom(((cCurrentStocks$1) <+ (({((ii) |-> (((cCurrentStocks$1 )(ii) + amt)))}))))) = (dom(MaxStocks)));
((((cCurrentStocks$1) <+ (({((ii) |-> (((cCurrentStocks$1 )(ii) + amt)))}))) )(ii$1) <= (MaxStocks )(ii$1));
(((((cRequiredAmounts$1) <+ (({((ii) |-> (((MaxStocks )(ii) - ((cCurrentStocks$1 )(ii) + amt))))}))) )(ii$1)) = (((MaxStocks )(ii$1) - (((cCurrentStocks$1) <+ (({((ii) |-> (((cCurrentStocks$1 )(ii) + amt)))}))) )(ii$1))));
((((cShortages$1) <+ (({((ii) |-> (FALSE))})))) : (((((1) .. (5))) --> (BOOL))));
((dom(((((cShortages$1) <+ (({((ii) |-> (FALSE))})))) |> (({TRUE}))))) = (SET(xx).(((xx) : (dom(CurrentStocks))) & ((((CurrentStocks) <+ (({((ii) |-> (((CurrentStocks )(ii) + amt)))}))) )(xx) +1 <= ((MaxStocks )(xx) / 2)))));
((dom(((((cShortages$1) <+ (({((ii) |-> (FALSE))})))) |> (({FALSE}))))) = ((((1) .. (5)) - SET(xx).(((xx) : (dom(CurrentStocks))) & ((((CurrentStocks) <+ (({((ii) |-> (((CurrentStocks )(ii) + amt)))}))) )(xx) +1 <= ((MaxStocks )(xx) / 2))))));
"Instruction Well Definess";
((ii) : (dom(cCurrentStocks$1)));
((res) = (res));
((res$1) = (res));
((sum) = (sum));
((sum$1) = (sum));
((ii$2) : (((0) .. (5))));
((sum$2) : (((0) .. ((ii$2 * 4000)))));
((sum$2) = (SIGMA(xx).(((xx) : (((1) .. (ii$2)))) | (cCurrentStocks$1 )(xx))));
(ii$2 +1 <= 5);
not((ii$2 +1 <= 5));
"Loop initialisation";
"Check invariant ((ii) : (((0) .. (5))))";
((0) : (((0) .. (5))));
"Check invariant ((sum$1) : (((0) .. ((ii * 4000)))))";
((0) : (((0) .. ((0 * 4000)))));
"Check invariant ((sum$1) = (SIGMA(xx).(((xx) : (((1) .. (ii)))) | (cCurrentStocks$1 )(xx))))";
((0) = (SIGMA(xx).(((xx) : (((1) .. (0)))) | (cCurrentStocks$1 )(xx))));
"Loop variant is positive";
(0 <= (6 - ii$2));
"Loop invariant is preserved";
(((ii$2 + 1)) : (((0) .. (5))));
(((sum$2 + (cCurrentStocks$1 )((ii$2 + 1)))) : (((0) .. (((ii$2 + 1) * 4000)))));
(((sum$2 + (cCurrentStocks$1 )((ii$2 + 1)))) = (SIGMA(xx).(((xx) : (((1) .. ((ii$2 + 1))))) | (cCurrentStocks$1 )(xx))));
"Variant is decreasing";
((6 - (ii$2 + 1)) +1 <= (6 - ii$2));
(((ii$2 + 1)) : (dom(cCurrentStocks$1)));
"End of loop";
((sum$2) = (SIGMA(xx).(((xx) : (dom(CurrentStocks))) | (CurrentStocks )(xx))));
((ii) : (dom(RequiredAmounts))) & ((res) = (res));
((ii) : (dom(RequiredAmounts)));
(((cRequiredAmounts$1 )(ii)) = ((RequiredAmounts )(ii)));
((ii) : (dom(cRequiredAmounts$1)));
((((ii) : (dom(cCurrentStocks$1)))) => (((ii) : (dom(cCurrentStocks$1))) & ((cCurrentStocks$1) : (((dom(cCurrentStocks$1)) +-> (ran(cCurrentStocks$1))))) & ((ii) : (dom(MaxStocks))) & ((MaxStocks) : (((dom(MaxStocks)) +-> (ran(MaxStocks)))))));
((((ii) : (dom(cRequiredAmounts$1)))) => (((ii) : (dom(cRequiredAmounts$1))) & ((cRequiredAmounts$1) : (((dom(cRequiredAmounts$1)) +-> (ran(cRequiredAmounts$1))))) & ((ii) : (dom(MaxStocks))) & ((MaxStocks) : (((dom(MaxStocks)) +-> (ran(MaxStocks))))) & ((ii) : (dom(cCurrentStocks$1))) & ((cCurrentStocks$1) : (((dom(cCurrentStocks$1)) +-> (ran(cCurrentStocks$1)))))));
!(ii).(((((ii) : (dom(cCurrentStocks$1)))) => (((cCurrentStocks$1 )(ii) <= (MaxStocks )(ii)))));
((dom(cCurrentStocks$1)) = (dom(MaxStocks)));
((dom(((cShortages$1) |> (({FALSE}))))) = ((((1) .. (5)) - Shortages)));
((dom(((cShortages$1) |> (({TRUE}))))) = (Shortages));
((cRequiredAmounts$1) = (RequiredAmounts));
((cCurrentStocks$1) = (CurrentStocks));
cShortages$1 : ((1) .. (5)) +-> BOOL;
dom(cShortages$1) = ((1) .. (5));
((cShortages$1) : (((((1) .. (5))) --> (BOOL))));
cRequiredAmounts$1 : ((1) .. (5)) +-> ((0) .. (4000));
dom(cRequiredAmounts$1) = ((1) .. (5));
((cRequiredAmounts$1) : (((((1) .. (5))) --> (((0) .. (4000))))));
cCurrentStocks$1 : ((1) .. (5)) +-> ((0) .. (4000));
dom(cCurrentStocks$1) = ((1) .. (5));
((cCurrentStocks$1) : (((((1) .. (5))) --> (((0) .. (4000))))));
((amt + amt) <= MaxStockCount_in);
(((amt + amt)) : (((0) .. (4000))));
((MaxStockCount_in) : (((0) .. (4000))));
((amt) : (((0) .. (4000))));
"Well definedness";
((cCurrentStocks$1) : (((dom(cCurrentStocks$1)) +-> (ran(cCurrentStocks$1)))));
((MaxStocks) : (((dom(MaxStocks)) +-> (ran(MaxStocks)))));
not(((2) = (0)));
((xx) : (((1) .. (0))));
((SET(xx).(((xx) : (((1) .. (0)))))) : (FIN(SET(xx).(((xx) : (((1) .. (0))))))));
((xx) : (dom(cCurrentStocks$1)));
(((0 + 1)) : (dom(cCurrentStocks$1)));
((cRequiredAmounts$1) : (((dom(cRequiredAmounts$1)) +-> (ran(cRequiredAmounts$1)))))
END
&
THEORY EnumerateX
END
