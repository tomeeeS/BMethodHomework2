IMPLEMENTATION shortage_classifier_i

REFINES shortage_classifier

DEFINITIONS
    "definitions.def"
    
OPERATIONS
    

    res <-- IsOnShortage(
        Shortages,
        CurrentStocks,
        ii,
        NewCurrentStock,
        MaxStocks
    ) =
    BEGIN
        IF NewCurrentStock < MaxStocks(ii) / 2 THEN
            res := Shortages;
            res(ii) := TRUE
        ELSE
            res := Shortages;
            res(ii) := FALSE
        END;
        
        ASSERT // helps in proofs
            
            // things outside ii aren't changed
            //& !xx.(xx: dom({ii} <<| (CurrentStocks <+ {ii |-> NewCurrentStock})) =>
                //(CurrentStocks <+ {ii |-> NewCurrentStock})(xx) = CurrentStocks(xx))
            !xx.(xx:  dom({ii} <<| CurrentStocks) 
                    & (CurrentStocks <+ {ii |-> NewCurrentStock})(xx) 
                        < MaxStocks(xx)/2
                =>
                    xx: { xx | xx: dom({ii} <<| CurrentStocks) 
                    & CurrentStocks(xx) < MaxStocks(xx)/2 }
            )
            & !xx.(xx: 
                {
                    xx | xx: dom({ii} <<| CurrentStocks) 
                    & (CurrentStocks <+ {ii |-> NewCurrentStock})(xx) 
                        < MaxStocks(xx)/2
                } =>
                    xx: dom({ii} <<| CurrentStocks) 
                    & (CurrentStocks <+ {ii |-> NewCurrentStock})(xx) 
                        < MaxStocks(xx)/2
            )
            
            & (!xx.(xx:  dom({ii} <<| CurrentStocks) 
                    & (CurrentStocks <+ {ii |-> NewCurrentStock})(xx) 
                        < MaxStocks(xx)/2
                =>
                    xx: { xx | xx: dom({ii} <<| CurrentStocks) 
                    & CurrentStocks(xx) < MaxStocks(xx)/2 }
            )) &
            (!xx.(xx:  dom({ii} <<| CurrentStocks) 
                    & CurrentStocks(xx)  
                        < MaxStocks(xx)/2
                =>
                    xx: { xx | xx: dom({ii} <<| CurrentStocks) 
                    & (CurrentStocks <+ {ii |-> NewCurrentStock})(xx) 
                        < MaxStocks(xx)/2}
            )) =>
            ({ // the universally quantified predicates above are only needed to help prove this equality:
                xx | xx: dom({ii} <<| CurrentStocks) 
                    & (CurrentStocks <+ {ii |-> NewCurrentStock})(xx) 
                        < MaxStocks(xx)/2} 
                = {xx | xx: dom({ii} <<| CurrentStocks) 
                    & CurrentStocks(xx) 
                        < MaxStocks(xx)/2
            })

            & !xx.(xx : dom({ii} <<| Shortages) =>
                res(xx) = Shortages(xx))

            & dom(({ii} <<| Shortages) |> {TRUE}) 
                = {xx | xx: dom({ii} <<| CurrentStocks) 
                    & CurrentStocks(xx) < MaxStocks(xx)/2}
        
            // what happens in ii
            & (NewCurrentStock < MaxStocks(ii) / 2 => 
                res(ii) = TRUE)
            & (not(NewCurrentStock < MaxStocks(ii) / 2) => 
                res(ii) = FALSE)


            // the new Shortages is the unchanged parts (outside of {ii})
            //   and the changed part (at {ii})
            //& Shortages <+ {ii |-> TRUE} = ({ii} <<| Shortages) \/ {ii |-> TRUE}
            & dom((Shortages <+ {ii |-> TRUE}) |> {TRUE}) =
                dom(({ii} <<| Shortages) |> {TRUE}) \/ {ii}
        
            & Shortages <+ {ii |-> FALSE} = ({ii} <<| Shortages) \/ {ii |-> FALSE}
            & (Shortages <+ {ii |-> FALSE} = ({ii} <<| Shortages) \/ {ii |-> FALSE} =>
                dom((Shortages <+ {ii |-> FALSE}) |> {TRUE}) =
                    dom(({ii} <<| Shortages) |> {TRUE}))                
            
            // CurrentStocks can also be split similarly
            & {xx | xx: dom({ii}<<|CurrentStocks)\/{ii} 
                    & (CurrentStocks<+{ii|->NewCurrentStock})(xx)+1<=MaxStocks(xx)/2} 
                = {xx | xx: dom({ii}<<|CurrentStocks) 
                    & (CurrentStocks<+{ii|->NewCurrentStock})(xx)+1<=MaxStocks(xx)/2}
                \/ {xx | xx: {ii} 
                    & (CurrentStocks<+{ii|->NewCurrentStock})(xx)+1<=MaxStocks(xx)/2}
        THEN
            skip
        END        
    END
    

END