IMPLEMENTATION shortage_classifier_i

REFINES shortage_classifier

DEFINITIONS
    "definitions.def";
    RES_SHORTAGE == (CurrentStocks<+{ii|->NewCurrentStock})(xx) < MaxStocks(xx)/2
    
OPERATIONS
    

    res <-- IsOnShortage(
        Shortages,
        CurrentStocks,
        ii,
        NewCurrentStock,
        MaxStocks
    ) =
    BEGIN
        ASSERT
            dom(Shortages|>{TRUE}) 
            = {
                xx | xx : dom(CurrentStocks) & CurrentStocks(xx) < MaxStocks(xx) / 2
            }
        THEN skip END;        
        
        
        IF NewCurrentStock < MaxStocks(ii) / 2 THEN
            res := Shortages;
            res(ii) := TRUE
        ELSE
            res := Shortages;
            res(ii) := FALSE
        END;
        
        
        ASSERT // helps in proofs
            
            dom(CurrentStocks) = dom(CurrentStocks<+{ii|->NewCurrentStock})
        
            // things outside ii aren't changed
            & dom(({ii}<<|Shortages)|>{TRUE}) 
            = {
                xx | xx : dom({ii}<<|CurrentStocks) & CurrentStocks(xx) < MaxStocks(xx) / 2
            }
            // A: 
            & !xx.(xx:  dom({ii} <<| CurrentStocks) 
                    & (CurrentStocks <+ {ii |-> NewCurrentStock})(xx) 
                        < MaxStocks(xx)/2
                =>
                    xx: { xx | xx: dom({ii} <<| CurrentStocks) 
                    & CurrentStocks(xx) < MaxStocks(xx)/2 }
            )
            // B: 
            /*& !xx.(xx: 
                {
                    xx | xx: dom({ii} <<| CurrentStocks) 
                    & (CurrentStocks <+ {ii |-> NewCurrentStock})(xx) 
                        < MaxStocks(xx)/2
                } =>
                    xx: dom({ii} <<| CurrentStocks) 
                    & (CurrentStocks <+ {ii |-> NewCurrentStock})(xx) 
                        < MaxStocks(xx)/2
            ) */           
            
            & dom(CurrentStocks <+ {ii |-> NewCurrentStock})
                = dom({ii} <<| CurrentStocks) \/ dom({ii |-> NewCurrentStock})
                
            /*
            // C: 
            & !xx.(xx: 
                {
                    xx | xx: dom({ii}<<|CurrentStocks)\/{ii} 
                        & RES_SHORTAGE
                } => 
                    xx: {
                        xx | xx: dom({ii}<<|CurrentStocks) 
                            & RES_SHORTAGE }
                    \/ {
                        xx | xx: {ii} 
                            & RES_SHORTAGE
                    }                        
            )            
            // D: 
            & !xx.(xx: 
                {xx | xx: dom(CurrentStocks) & not(xx = ii)
                    & RES_SHORTAGE}
                \/ {xx | xx = ii
                    & RES_SHORTAGE}          
                => 
                    xx: {xx | xx: dom(CurrentStocks)
                        & RES_SHORTAGE}
            )
            */
            /*
!xx.(xx: {xx | xx: dom(CurrentStocks) & not(xx = ii) & 0<= -1-(CurrentStocks<+{ii|->NewCurrentStock})(xx)+MaxStocks(xx)/2}\/{xx | xx = ii & 0<= -1-(CurrentStocks<+{ii|->NewCurrentStock})(xx)+MaxStocks(xx)/2} => xx: dom(CurrentStocks) & 0<= -1-(CurrentStocks<+{ii|->NewCurrentStock})(xx)+MaxStocks(xx)/2)
*/

            & !xx.(xx : dom({ii} <<| Shortages) =>
                res(xx) = Shortages(xx))

            & dom(({ii} <<| Shortages) |> {TRUE}) 
                = {xx | xx: dom({ii} <<| CurrentStocks) 
                    & CurrentStocks(xx) < MaxStocks(xx)/2}
        
            // what happens in ii
            & (NewCurrentStock < MaxStocks(ii) / 2 => 
                res(ii) = TRUE)
            & (not(NewCurrentStock < MaxStocks(ii) / 2) => 
                res(ii) = FALSE)

            // the new Shortages is the unchanged parts (outside of {ii})
            //   and the changed part (at {ii})
            //& Shortages <+ {ii |-> TRUE} = ({ii} <<| Shortages) \/ {ii |-> TRUE}
            & dom((Shortages <+ {ii |-> TRUE}) |> {TRUE}) =
                dom(({ii} <<| Shortages) |> {TRUE}) 
                \/ dom({ii |-> res(ii)} |> {TRUE})
        
            & Shortages <+ {ii |-> FALSE} = ({ii} <<| Shortages) \/ {ii |-> FALSE}
            
            & dom({ii}<<|Shortages|>{TRUE}) <: dom(Shortages|>{TRUE})
        THEN skip END; ASSERT
            { // A and B are only needed to help prove this equality:
                xx | xx: dom({ii} <<| CurrentStocks) 
                    & (CurrentStocks <+ {ii |-> NewCurrentStock})(xx) 
                        < MaxStocks(xx)/2
            } =
            {
                xx | xx: dom({ii} <<| CurrentStocks) 
                    & CurrentStocks(xx) 
                        < MaxStocks(xx)/2
            }  

            & dom((Shortages <+ {ii |-> FALSE}) |> {TRUE}) =
                dom(({ii} <<| Shortages) |> {TRUE})                
            
            /*(
                {xx | xx: dom({ii}<<|CurrentStocks)\/{ii} 
                    & RES_SHORTAGE} 
                <: {xx | xx: dom({ii}<<|CurrentStocks) 
                    & RES_SHORTAGE}
                \/ {xx | xx: {ii} 
                    & RES_SHORTAGE}
            )
            & (
                {xx | xx: dom({ii}<<|CurrentStocks) 
                    & RES_SHORTAGE}
                \/ {xx | xx: {ii} 
                    & RES_SHORTAGE} 
                <: {xx | xx: dom({ii}<<|CurrentStocks)\/{ii} 
                    & RES_SHORTAGE}
            )*/


            /* SimplifySetComXY.11 	 (Backward)
                x\S
                =>
                ({x | x: S} == S)
            & { xx | xx: dom(CurrentStocks <+ {ii |-> NewCurrentStock})}
                = { xx | xx: dom({ii} <<| CurrentStocks) }
                \/ {ii}
            
        THEN skip END; ASSERT */
/*
            !xx.((xx: (dom({ii}<<|CurrentStocks) \/ {ii})
                    & (CurrentStocks<+{ii|->NewCurrentStock})(xx)+1<=MaxStocks(xx)/2
                )
                =>
                (xx: dom(CurrentStocks<+{ii|->NewCurrentStock}) 
                    & (CurrentStocks<+{ii|->NewCurrentStock})(xx)+1<=MaxStocks(xx)/2)
            )            
        THEN skip END; ASSERT
            ({ xx | xx: dom({ii}<<|CurrentStocks) 
                    & (CurrentStocks<+{ii|->NewCurrentStock})(xx)+1<=MaxStocks(xx)/2}
                \/ {ii}
                <: {xx | xx: dom(CurrentStocks<+{ii|->NewCurrentStock}) 
                    & (CurrentStocks<+{ii|->NewCurrentStock})(xx)+1<=MaxStocks(xx)/2}
            )                        
            & ({xx | xx: dom(CurrentStocks<+{ii|->NewCurrentStock}) 
                    & (CurrentStocks<+{ii|->NewCurrentStock})(xx)+1<=MaxStocks(xx)/2}
                <: { xx | xx: dom({ii}<<|CurrentStocks) 
                    & (CurrentStocks<+{ii|->NewCurrentStock})(xx)+1<=MaxStocks(xx)/2}
                \/ {ii}
            )
*/
        THEN skip END; ASSERT
            ({xx | xx: dom(CurrentStocks<+{ii|->NewCurrentStock}) 
                    & (CurrentStocks<+{ii|->NewCurrentStock})(xx)+1<=MaxStocks(xx)/2}
                = { xx | xx: dom({ii}<<|CurrentStocks) 
                    & (CurrentStocks<+{ii|->NewCurrentStock})(xx)+1<=MaxStocks(xx)/2}
                \/ { xx | xx: dom({ii|->NewCurrentStock})
                    & (CurrentStocks<+{ii|->NewCurrentStock})(xx)+1<=MaxStocks(xx)/2}
            )

            /*

dom(Shortages<+{ii|->TRUE}|>{TRUE}) = {xx | xx: dom(CurrentStocks) & (CurrentStocks<+{ii|->NewCurrentStock})(xx)+1<=MaxStocks(xx)/2}

            // CurrentStocks can also be split similarly
            // C and D are only needed to help prove this equality:
            & (
                {xx | xx: dom({ii}<<|CurrentStocks)\/{ii} 
                    & RES_SHORTAGE} 
                = {xx | xx: dom({ii}<<|CurrentStocks) 
                    & RES_SHORTAGE}
                \/ {xx | xx: {ii} 
                    & RES_SHORTAGE}
            )*/
            
        THEN skip END; ASSERT
            
        { xx | xx: dom({ii|->NewCurrentStock})
                & (CurrentStocks<+{ii|->NewCurrentStock})(xx)+1<=MaxStocks(xx)/2}
            = dom({ii |-> res(ii)} |> {TRUE})
            
        THEN skip END
    END
    

END